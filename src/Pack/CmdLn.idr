module Pack.CmdLn

import Pack.Err
import System.Console.GetOpt

%default total

||| Commands accepted by *pack*. Most of these
||| operate on a list of packages and/or
||| projects with an `.ipkg` file.
public export
data Cmd : Type where
  Install        : Cmd
  InstallWithSrc : Cmd
  InstallApp     : Cmd
  UpdateDB       : Cmd
  SwitchRepo     : Cmd
  PrintHelp      : Cmd

export
Show Cmd where
  show Install        = "Install"
  show InstallWithSrc = "InstallWithSrc"
  show InstallApp     = "InstallApp"
  show PrintHelp      = "PrintHelp"
  show UpdateDB       = "UpdateDB"
  show SwitchRepo     = "SwitchRepo"

||| Program configuration
public export
record Config where
  constructor MkConfig

  ||| Directory where the *pack* DB and installed
  ||| libraries and executables reside
  packDir   : String

  ||| The pack command to run
  cmd       : Cmd

  ||| The packages to build or install
  packages  : List String

  ||| Database to use
  dbVersion : String

export
Show Config where
  show c = """
    MkConfig {
      cmd       := \{show c.cmd}
    , packDir   := \{show c.packDir}
    , dbVersion := \{show c.dbVersion}
    , packages  := \{show c.packages}
    }
    """

||| Initial configuration.
export
init : (dir : String) -> (pkgs : List String) -> Config
init dir pkgs = MkConfig {
    cmd           = PrintHelp
  , packDir       = dir
  , dbVersion     = "HEAD"
  , packages      = pkgs
  }

||| Root directory where files generated by *pack*
||| are stored.
export
rootDir : (conf : Config) => String
rootDir = conf.packDir

||| Temporary directory used for building packages.
export
tmpDir : Config => String
tmpDir = "\{rootDir}/tmp"

||| Directory where databases are stored.
export
dbDir : Config => String
dbDir = "\{rootDir}/db"

--------------------------------------------------------------------------------
--          Applying Command Line Args
--------------------------------------------------------------------------------

help : Config -> Config
help = {cmd := PrintHelp}

switch : Config -> Config
switch = {cmd := SwitchRepo}

dir : String -> Config -> Config
dir s = {packDir := s}

install : Config -> Config
install = {cmd := Install}

installSrc : Config -> Config
installSrc = {cmd := InstallWithSrc}

installApp : Config -> Config
installApp = {cmd := InstallApp}

updateDb : Config -> Config
updateDb = {cmd := UpdateDB}

setDB : String -> Config -> Config
setDB s = {dbVersion := s}

-- command line options with description
descs : List $ OptDescr (Config -> Config)
descs = [ MkOpt ['h'] ["help"]      (NoArg help)
           "Print this help text"

        , MkOpt [] ["pack-dir"]   (ReqArg dir "<dir>")
           """
           Directory where pack stores its database and
           installed packages. This defaults to \"$PACK_DIR\"
           (if set) or \"$HOME/.pack\" otherwise.
           """

        , MkOpt [] ["switch"]   (NoArg switch)
           """
           Change the repository `$PACK_DIR/bin` points
           to. If `$PACK_DIR/bin` is on your path, all applications
           installed for the given repository (including Idris2
           itself) will be on your path as well.
           Note: This will install Idris2 and *pack* form the
           given repository so it may take some time.
           """

        , MkOpt [] ["install"]   (NoArg install)
           "Install the given package(s) or local .ipkg files"

        , MkOpt [] ["install-with-src"]   (NoArg installSrc)
           "Install the given package(s) or local .ipkg files"

        , MkOpt [] ["install-app"]   (NoArg installApp)
           "Install the given executable(s)"

        , MkOpt [] ["update-db"]   (NoArg updateDb)
           "Update the pack data base"

        , MkOpt ['p'] ["package-set"]   (ReqArg setDB "<db>")
           """
           Set the curated package set to use. At the
           moment, this defaults to `HEAD`, the latest commits
           of all packages will be used. This is bound to change
           once we have a reasonably stable package set.
           """
        ]

||| Given a root directory for *pack*, generates the application
||| config from a list of command line arguments.
export
applyArgs : (dir : String) -> List String -> Either PackErr Config
applyArgs dir args =
  case getOpt RequireOrder descs args of
       MkResult opts n  []      []       => Right $ foldl (flip apply) (init dir n) opts
       MkResult _    _ (u :: _) _        => Left (UnknownArg u)
       MkResult _    _ _        (e :: _) => Left (ErroneousArg e)

--------------------------------------------------------------------------------
--          Usage Info
--------------------------------------------------------------------------------

version : String
version = "0.0.1"

progName : String
progName = "pack"

usage : String
usage = "Usage: " ++ progName ++ " [options] [packages]\n\nOptions:\n"

||| Application info printed with the `--help` action.
export
usageInfo : String
usageInfo = usageInfo usage descs
